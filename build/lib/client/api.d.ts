/**
 * Î»ORM Service
 * service of lambda orm
 *
 * The version of the OpenAPI document: 0.3.0
 * Contact: flaviolrita@hotmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface Constraint
 */
export interface Constraint {
    /**
     *
     * @type {string}
     * @memberof Constraint
     */
    'message': string;
    /**
     *
     * @type {string}
     * @memberof Constraint
     */
    'condition': string;
}
/**
 *
 * @export
 * @interface DataSource
 */
export interface DataSource {
    /**
     *
     * @type {string}
     * @memberof DataSource
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof DataSource
     */
    'dialect': string;
    /**
     *
     * @type {string}
     * @memberof DataSource
     */
    'mapping': string;
    /**
     *
     * @type {any}
     * @memberof DataSource
     */
    'connection': any;
}
/**
 *
 * @export
 * @interface Dependent
 */
export interface Dependent {
    /**
     *
     * @type {string}
     * @memberof Dependent
     */
    'entity': string;
    /**
     *
     * @type {Relation}
     * @memberof Dependent
     */
    'relation': Relation;
}
/**
 *
 * @export
 * @interface Entity
 */
export interface Entity {
    /**
     *
     * @type {string}
     * @memberof Entity
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof Entity
     */
    'extends'?: string;
    /**
     *
     * @type {boolean}
     * @memberof Entity
     */
    'abstract'?: boolean;
    /**
     *
     * @type {string}
     * @memberof Entity
     */
    'singular'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof Entity
     */
    'uniqueKey': Array<string>;
    /**
     *
     * @type {Array<Index>}
     * @memberof Entity
     */
    'indexes': Array<Index>;
    /**
     *
     * @type {Array<string>}
     * @memberof Entity
     */
    'primaryKey': Array<string>;
    /**
     *
     * @type {Array<Property>}
     * @memberof Entity
     */
    'properties': Array<Property>;
    /**
     *
     * @type {Array<Relation>}
     * @memberof Entity
     */
    'relations': Array<Relation>;
    /**
     *
     * @type {Array<Dependent>}
     * @memberof Entity
     */
    'dependents': Array<Dependent>;
    /**
     *
     * @type {Array<Constraint>}
     * @memberof Entity
     */
    'constraints'?: Array<Constraint>;
}
/**
 *
 * @export
 * @interface EntityMapping
 */
export interface EntityMapping {
    /**
     *
     * @type {string}
     * @memberof EntityMapping
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof EntityMapping
     */
    'extends'?: string;
    /**
     *
     * @type {boolean}
     * @memberof EntityMapping
     */
    'abstract'?: boolean;
    /**
     *
     * @type {string}
     * @memberof EntityMapping
     */
    'singular'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof EntityMapping
     */
    'uniqueKey': Array<string>;
    /**
     *
     * @type {Array<Index>}
     * @memberof EntityMapping
     */
    'indexes': Array<Index>;
    /**
     *
     * @type {Array<string>}
     * @memberof EntityMapping
     */
    'primaryKey': Array<string>;
    /**
     *
     * @type {Array<PropertyMapping>}
     * @memberof EntityMapping
     */
    'properties': Array<PropertyMapping>;
    /**
     *
     * @type {Array<Relation>}
     * @memberof EntityMapping
     */
    'relations': Array<Relation>;
    /**
     *
     * @type {Array<Dependent>}
     * @memberof EntityMapping
     */
    'dependents': Array<Dependent>;
    /**
     *
     * @type {Array<Constraint>}
     * @memberof EntityMapping
     */
    'constraints'?: Array<Constraint>;
    /**
     *
     * @type {string}
     * @memberof EntityMapping
     */
    'mapping': string;
}
/**
 *
 * @export
 * @interface Enum
 */
export interface Enum {
    /**
     *
     * @type {string}
     * @memberof Enum
     */
    'name': string;
    /**
     *
     * @type {Array<EnumValue>}
     * @memberof Enum
     */
    'values': Array<EnumValue>;
}
/**
 *
 * @export
 * @interface EnumValue
 */
export interface EnumValue {
    /**
     *
     * @type {string}
     * @memberof EnumValue
     */
    'name': string;
    /**
     *
     * @type {any}
     * @memberof EnumValue
     */
    'value': any;
}
/**
 *
 * @export
 * @interface Health
 */
export interface Health {
    /**
     *
     * @type {string}
     * @memberof Health
     */
    'message': string;
    /**
     *
     * @type {string}
     * @memberof Health
     */
    'time': string;
    /**
     *
     * @type {number}
     * @memberof Health
     */
    'uptime': number;
}
/**
 *
 * @export
 * @interface Index
 */
export interface Index {
    /**
     *
     * @type {string}
     * @memberof Index
     */
    'name': string;
    /**
     *
     * @type {Array<string>}
     * @memberof Index
     */
    'fields': Array<string>;
}
/**
 *
 * @export
 * @interface Mapping
 */
export interface Mapping {
    /**
     *
     * @type {string}
     * @memberof Mapping
     */
    'extends'?: string;
    /**
     *
     * @type {string}
     * @memberof Mapping
     */
    'mapping'?: string;
    /**
     *
     * @type {string}
     * @memberof Mapping
     */
    'name': string;
    /**
     *
     * @type {Array<EntityMapping>}
     * @memberof Mapping
     */
    'entities': Array<EntityMapping>;
}
/**
 *
 * @export
 * @interface Metadata
 */
export interface Metadata {
    /**
     *
     * @type {string}
     * @memberof Metadata
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof Metadata
     */
    'type': string;
    /**
     *
     * @type {string}
     * @memberof Metadata
     */
    'entity'?: string;
    /**
     *
     * @type {Array<Metadata>}
     * @memberof Metadata
     */
    'children'?: Array<Metadata>;
    /**
     *
     * @type {Array<Property>}
     * @memberof Metadata
     */
    'fields'?: Array<Property>;
    /**
     *
     * @type {string}
     * @memberof Metadata
     */
    'property'?: string;
    /**
     *
     * @type {Array<Parameter>}
     * @memberof Metadata
     */
    'parameters'?: Array<Parameter>;
    /**
     *
     * @type {Relation}
     * @memberof Metadata
     */
    'relation'?: Relation;
    /**
     *
     * @type {string}
     * @memberof Metadata
     */
    'sentence'?: string;
    /**
     *
     * @type {string}
     * @memberof Metadata
     */
    'alias'?: string;
    /**
     *
     * @type {number}
     * @memberof Metadata
     */
    'number'?: number;
}
/**
 *
 * @export
 * @interface MetadataConstraint
 */
export interface MetadataConstraint {
    /**
     *
     * @type {string}
     * @memberof MetadataConstraint
     */
    'entity': string;
    /**
     *
     * @type {Array<Constraint>}
     * @memberof MetadataConstraint
     */
    'constraints': Array<Constraint>;
    /**
     *
     * @type {Array<MetadataConstraint>}
     * @memberof MetadataConstraint
     */
    'children'?: Array<MetadataConstraint>;
}
/**
 *
 * @export
 * @interface MetadataModel
 */
export interface MetadataModel {
    /**
     *
     * @type {string}
     * @memberof MetadataModel
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof MetadataModel
     */
    'type': string;
    /**
     *
     * @type {Array<MetadataModel>}
     * @memberof MetadataModel
     */
    'children'?: Array<MetadataModel>;
}
/**
 *
 * @export
 * @interface MetadataParameter
 */
export interface MetadataParameter {
    /**
     *
     * @type {string}
     * @memberof MetadataParameter
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof MetadataParameter
     */
    'type': string;
    /**
     *
     * @type {Array<MetadataParameter>}
     * @memberof MetadataParameter
     */
    'children'?: Array<MetadataParameter>;
}
/**
 *
 * @export
 * @interface MetadataSentence
 */
export interface MetadataSentence {
    /**
     *
     * @type {string}
     * @memberof MetadataSentence
     */
    'entity': string;
    /**
     *
     * @type {string}
     * @memberof MetadataSentence
     */
    'dialect': string;
    /**
     *
     * @type {string}
     * @memberof MetadataSentence
     */
    'dataSource': string;
    /**
     *
     * @type {string}
     * @memberof MetadataSentence
     */
    'sentence': string;
    /**
     *
     * @type {Array<MetadataSentence>}
     * @memberof MetadataSentence
     */
    'children'?: Array<MetadataSentence>;
}
/**
 *
 * @export
 * @interface Parameter
 */
export interface Parameter {
    /**
     *
     * @type {string}
     * @memberof Parameter
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof Parameter
     */
    'type': string;
    /**
     *
     * @type {any}
     * @memberof Parameter
     */
    'value'?: any;
}
/**
 *
 * @export
 * @interface Ping
 */
export interface Ping {
    /**
     *
     * @type {string}
     * @memberof Ping
     */
    'message': string;
    /**
     *
     * @type {string}
     * @memberof Ping
     */
    'time': string;
}
/**
 *
 * @export
 * @interface Property
 */
export interface Property {
    /**
     *
     * @type {string}
     * @memberof Property
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof Property
     */
    'type': string;
    /**
     *
     * @type {number}
     * @memberof Property
     */
    'length'?: number;
    /**
     *
     * @type {boolean}
     * @memberof Property
     */
    'nullable'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Property
     */
    'primaryKey'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Property
     */
    'autoincrement'?: boolean;
    /**
     *
     * @type {string}
     * @memberof Property
     */
    'default'?: string;
    /**
     *
     * @type {string}
     * @memberof Property
     */
    'readValue'?: string;
    /**
     *
     * @type {string}
     * @memberof Property
     */
    'writeValue'?: string;
    /**
     *
     * @type {string}
     * @memberof Property
     */
    'enum'?: string;
}
/**
 *
 * @export
 * @interface PropertyMapping
 */
export interface PropertyMapping {
    /**
     *
     * @type {string}
     * @memberof PropertyMapping
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof PropertyMapping
     */
    'type': string;
    /**
     *
     * @type {number}
     * @memberof PropertyMapping
     */
    'length'?: number;
    /**
     *
     * @type {boolean}
     * @memberof PropertyMapping
     */
    'nullable'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PropertyMapping
     */
    'primaryKey'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PropertyMapping
     */
    'autoincrement'?: boolean;
    /**
     *
     * @type {string}
     * @memberof PropertyMapping
     */
    'default'?: string;
    /**
     *
     * @type {string}
     * @memberof PropertyMapping
     */
    'readValue'?: string;
    /**
     *
     * @type {string}
     * @memberof PropertyMapping
     */
    'writeValue'?: string;
    /**
     *
     * @type {string}
     * @memberof PropertyMapping
     */
    'enum'?: string;
    /**
     *
     * @type {string}
     * @memberof PropertyMapping
     */
    'mapping': string;
    /**
     *
     * @type {string}
     * @memberof PropertyMapping
     */
    'key'?: string;
}
/**
 *
 * @export
 * @interface QueryOptions
 */
export interface QueryOptions {
    /**
     *
     * @type {string}
     * @memberof QueryOptions
     */
    'stage'?: string;
    /**
     *
     * @type {string}
     * @memberof QueryOptions
     */
    'view'?: string;
    /**
     *
     * @type {number}
     * @memberof QueryOptions
     */
    'chunkSize'?: number;
    /**
     *
     * @type {boolean}
     * @memberof QueryOptions
     */
    'tryAllCan'?: boolean;
}
/**
 *
 * @export
 * @interface QueryRequest
 */
export interface QueryRequest {
    /**
     *
     * @type {QueryOptions}
     * @memberof QueryRequest
     */
    'options'?: QueryOptions;
    /**
     *
     * @type {string}
     * @memberof QueryRequest
     */
    'expression': string;
    /**
     *
     * @type {any}
     * @memberof QueryRequest
     */
    'data'?: any;
}
/**
 *
 * @export
 * @interface QueryRequest
 */
export interface QueryQueuedRequest {
    /**
     *
     * @type {QueryOptions}
     * @memberof QueryQueuedRequest
     */
    'options'?: QueryOptions;
    /**
     *
     * @type {string}
     * @memberof QueryQueuedRequest
     */
    'expression': string;
    /**
     *
     * @type {any}
     * @memberof QueryQueuedRequest
     */
    'data'?: any;
    /**
    *
    * @type {string}
    * @memberof QueryQueuedRequest
    */
    'topic': string;
    /**
    *
    * @type {number}
    * @memberof QueryQueuedRequest
    */
    'chunk'?: number;
}
/**
 *
 * @export
 * @interface QueryResponse
 */
export interface QueryResponse {
    /**
     *
     * @type {any}
     * @memberof QueryResponse
     */
    'result': any;
}
/**
 *
 * @export
 * @interface Relation
 */
export interface Relation {
    /**
     *
     * @type {string}
     * @memberof Relation
     */
    'name': string;
    /**
     *
     * @type {RelationType}
     * @memberof Relation
     */
    'type': RelationType;
    /**
     *
     * @type {boolean}
     * @memberof Relation
     */
    'composite'?: boolean;
    /**
     *
     * @type {string}
     * @memberof Relation
     */
    'from': string;
    /**
     *
     * @type {string}
     * @memberof Relation
     */
    'entity': string;
    /**
     *
     * @type {string}
     * @memberof Relation
     */
    'to': string;
    /**
     *
     * @type {boolean}
     * @memberof Relation
     */
    'weak'?: boolean;
    /**
     *
     * @type {string}
     * @memberof Relation
     */
    'target'?: string;
    /**
     *
     * @type {boolean}
     * @memberof Relation
     */
    'targetComposite'?: boolean;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const RelationType: {
    readonly OneToMany: "oneToMany";
    readonly ManyToOne: "manyToOne";
    readonly OneToOne: "oneToOne";
};
export type RelationType = typeof RelationType[keyof typeof RelationType];
/**
 *
 * @export
 * @interface RuleDataSource
 */
export interface RuleDataSource {
    /**
     *
     * @type {string}
     * @memberof RuleDataSource
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof RuleDataSource
     */
    'condition'?: string;
}
/**
 *
 * @export
 * @interface SchemaData
 */
export interface SchemaData {
    /**
     *
     * @type {Array<SchemaDataEntity>}
     * @memberof SchemaData
     */
    'entities': Array<SchemaDataEntity>;
}
/**
 *
 * @export
 * @interface SchemaDataEntity
 */
export interface SchemaDataEntity {
    /**
     *
     * @type {string}
     * @memberof SchemaDataEntity
     */
    'entity': string;
    /**
     *
     * @type {Array<any>}
     * @memberof SchemaDataEntity
     */
    'rows': Array<any>;
}
/**
 *
 * @export
 * @interface Stage
 */
export interface Stage {
    /**
     *
     * @type {string}
     * @memberof Stage
     */
    'name': string;
    /**
     *
     * @type {Array<RuleDataSource>}
     * @memberof Stage
     */
    'dataSources': Array<RuleDataSource>;
}
/**
 * ExpressionApi - axios parameter creator
 * @export
 */
export declare const ExpressionApiAxiosParamCreator: (configuration: Configuration) => {
    /**
     *
     * @param {QueryRequest} [queryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    constraints: (queryRequest?: QueryRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {QueryRequest} queryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    execute: (queryRequest: QueryRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {QueryRequest} [queryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    metadata: (queryRequest?: QueryRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {QueryRequest} [queryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    model: (queryRequest?: QueryRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {QueryRequest} [queryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    parameters: (queryRequest?: QueryRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {QueryRequest} queryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sentence: (queryRequest: QueryRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ExpressionApi - functional programming interface
 * @export
 */
export declare const ExpressionApiFp: (configuration: Configuration) => {
    /**
     *
     * @param {QueryRequest} [queryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    constraints(queryRequest?: QueryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetadataConstraint>>;
    /**
     *
     * @param {QueryRequest} queryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    execute(queryRequest: QueryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
    *
    * @param {QueryRequest} queryRequest
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    */
    executeQueued(queryQueuedRequest: QueryQueuedRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @param {QueryRequest} [queryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    metadata(queryRequest?: QueryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Metadata>>;
    /**
     *
     * @param {QueryRequest} [queryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    model(queryRequest?: QueryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MetadataModel>>>;
    /**
     *
     * @param {QueryRequest} [queryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    parameters(queryRequest?: QueryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MetadataParameter>>>;
    /**
     *
     * @param {QueryRequest} queryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sentence(queryRequest: QueryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetadataSentence>>;
};
/**
 * ExpressionApi - factory interface
 * @export
 */
export declare const ExpressionApiFactory: (configuration: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {QueryRequest} [queryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    constraints(queryRequest?: QueryRequest, options?: any): AxiosPromise<MetadataConstraint>;
    /**
     *
     * @param {QueryRequest} queryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    execute(queryRequest: QueryRequest, options?: any): AxiosPromise<any>;
    /**
     *
     * @param {QueryRequest} [queryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    metadata(queryRequest?: QueryRequest, options?: any): AxiosPromise<Metadata>;
    /**
     *
     * @param {QueryRequest} [queryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    model(queryRequest?: QueryRequest, options?: any): AxiosPromise<Array<MetadataModel>>;
    /**
     *
     * @param {QueryRequest} [queryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    parameters(queryRequest?: QueryRequest, options?: any): AxiosPromise<Array<MetadataParameter>>;
    /**
     *
     * @param {QueryRequest} queryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sentence(queryRequest: QueryRequest, options?: any): AxiosPromise<MetadataSentence>;
};
/**
 * ExpressionApi - object-oriented interface
 * @export
 * @class ExpressionApi
 * @extends {BaseAPI}
 */
export declare class ExpressionApi extends BaseAPI {
    /**
     *
     * @param {QueryRequest} [queryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpressionApi
     */
    constraints(queryRequest?: QueryRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MetadataConstraint, any>>;
    /**
     *
     * @param {QueryRequest} queryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpressionApi
     */
    execute(queryRequest: QueryRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @param {QueryQueuedRequest} queryQueuedRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpressionApi
     */
    executeQueued(queryQueuedRequest: QueryQueuedRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @param {QueryRequest} [queryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpressionApi
     */
    metadata(queryRequest?: QueryRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Metadata, any>>;
    /**
     *
     * @param {QueryRequest} [queryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpressionApi
     */
    model(queryRequest?: QueryRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MetadataModel[], any>>;
    /**
     *
     * @param {QueryRequest} [queryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpressionApi
     */
    parameters(queryRequest?: QueryRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MetadataParameter[], any>>;
    /**
     *
     * @param {QueryRequest} queryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpressionApi
     */
    sentence(queryRequest: QueryRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MetadataSentence, any>>;
}
/**
 * GeneralApi - axios parameter creator
 * @export
 */
export declare const GeneralApiAxiosParamCreator: (configuration: Configuration) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    health: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    metrics: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ping: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * GeneralApi - functional programming interface
 * @export
 */
export declare const GeneralApiFp: (configuration: Configuration) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    health(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Health>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    metrics(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ping(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ping>>;
};
/**
 * GeneralApi - factory interface
 * @export
 */
export declare const GeneralApiFactory: (configuration: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    health(options?: any): AxiosPromise<Health>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    metrics(options?: any): AxiosPromise<any>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ping(options?: any): AxiosPromise<Ping>;
};
/**
 * GeneralApi - object-oriented interface
 * @export
 * @class GeneralApi
 * @extends {BaseAPI}
 */
export declare class GeneralApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    health(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Health, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    metrics(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    ping(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Ping, any>>;
}
/**
 * SchemaApi - axios parameter creator
 * @export
 */
export declare const SchemaApiAxiosParamCreator: (configuration: Configuration) => {
    /**
     *
     * @param {string} _enum
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _enum: (_enum: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataSources: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} datasource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datasource: (datasource: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    entities: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} entity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    entity: (entity: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} mapping
     * @param {string} entity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    entityMapping: (mapping: string, entity: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    enums: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} mapping
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mapping: (mapping: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mappings: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} stage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stage: (stage: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stages: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SchemaApi - functional programming interface
 * @export
 */
export declare const SchemaApiFp: (configuration: Configuration) => {
    /**
     *
     * @param {string} _enum
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _enum(_enum: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Enum>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataSources(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DataSource>>>;
    /**
     *
     * @param {string} datasource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datasource(datasource: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataSource>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    entities(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Entity>>>;
    /**
     *
     * @param {string} entity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    entity(entity: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Entity>>;
    /**
     *
     * @param {string} mapping
     * @param {string} entity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    entityMapping(mapping: string, entity: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityMapping>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    enums(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Enum>>>;
    /**
     *
     * @param {string} mapping
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mapping(mapping: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Mapping>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mappings(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Mapping>>>;
    /**
     *
     * @param {string} stage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stage(stage: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Stage>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stages(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Stage>>>;
};
/**
 * SchemaApi - factory interface
 * @export
 */
export declare const SchemaApiFactory: (configuration: Configuration, axios?: AxiosInstance) => {
    /**
     *
     * @param {string} _enum
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _enum(_enum: string, options?: any): AxiosPromise<Enum>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataSources(options?: any): AxiosPromise<Array<DataSource>>;
    /**
     *
     * @param {string} datasource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datasource(datasource: string, options?: any): AxiosPromise<DataSource>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    entities(options?: any): AxiosPromise<Array<Entity>>;
    /**
     *
     * @param {string} entity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    entity(entity: string, options?: any): AxiosPromise<Entity>;
    /**
     *
     * @param {string} mapping
     * @param {string} entity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    entityMapping(mapping: string, entity: string, options?: any): AxiosPromise<EntityMapping>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    enums(options?: any): AxiosPromise<Array<Enum>>;
    /**
     *
     * @param {string} mapping
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mapping(mapping: string, options?: any): AxiosPromise<Mapping>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mappings(options?: any): AxiosPromise<Array<Mapping>>;
    /**
     *
     * @param {string} stage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stage(stage: string, options?: any): AxiosPromise<Stage>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stages(options?: any): AxiosPromise<Array<Stage>>;
};
/**
 * SchemaApi - object-oriented interface
 * @export
 * @class SchemaApi
 * @extends {BaseAPI}
 */
export declare class SchemaApi extends BaseAPI {
    /**
     *
     * @param {string} _enum
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaApi
     */
    _enum(_enum: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Enum, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaApi
     */
    dataSources(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DataSource[], any>>;
    /**
     *
     * @param {string} datasource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaApi
     */
    datasource(datasource: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DataSource, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaApi
     */
    entities(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Entity[], any>>;
    /**
     *
     * @param {string} entity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaApi
     */
    entity(entity: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Entity, any>>;
    /**
     *
     * @param {string} mapping
     * @param {string} entity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaApi
     */
    entityMapping(mapping: string, entity: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EntityMapping, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaApi
     */
    enums(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Enum[], any>>;
    /**
     *
     * @param {string} mapping
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaApi
     */
    mapping(mapping: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Mapping, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaApi
     */
    mappings(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Mapping[], any>>;
    /**
     *
     * @param {string} stage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaApi
     */
    stage(stage: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Stage, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaApi
     */
    stages(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Stage[], any>>;
}
/**
 * StageApi - axios parameter creator
 * @export
 */
export declare const StageApiAxiosParamCreator: (configuration: Configuration) => {
    /**
     *
     * @param {string} stage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _export: (stage: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} stage
     * @param {SchemaData} schemaData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _import: (stage: string, schemaData: SchemaData, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} stage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exists: (stage: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * StageApi - functional programming interface
 * @export
 */
export declare const StageApiFp: (configuration: Configuration) => {
    /**
     *
     * @param {string} stage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _export(stage: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchemaData>>;
    /**
     *
     * @param {string} stage
     * @param {SchemaData} schemaData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _import(stage: string, schemaData: SchemaData, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @param {string} stage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exists(stage: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>>;
};
/**
 * StageApi - factory interface
 * @export
 */
export declare const StageApiFactory: (configuration: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {string} stage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _export(stage: string, options?: any): AxiosPromise<SchemaData>;
    /**
     *
     * @param {string} stage
     * @param {SchemaData} schemaData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _import(stage: string, schemaData: SchemaData, options?: any): AxiosPromise<any>;
    /**
     *
     * @param {string} stage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exists(stage: string, options?: any): AxiosPromise<boolean>;
};
/**
 * StageApi - object-oriented interface
 * @export
 * @class StageApi
 * @extends {BaseAPI}
 */
export declare class StageApi extends BaseAPI {
    /**
     *
     * @param {string} stage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StageApi
     */
    _export(stage: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SchemaData, any>>;
    /**
     *
     * @param {string} stage
     * @param {SchemaData} schemaData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StageApi
     */
    _import(stage: string, schemaData: SchemaData, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @param {string} stage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StageApi
     */
    exists(stage: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<boolean, any>>;
}
