"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Î»ORM Service
 * service of lambda orm
 *
 * The version of the OpenAPI document: 0.3.0
 * Contact: flaviolrita@hotmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StageApi = exports.StageApiFactory = exports.StageApiFp = exports.StageApiAxiosParamCreator = exports.SchemaApi = exports.SchemaApiFactory = exports.SchemaApiFp = exports.SchemaApiAxiosParamCreator = exports.GeneralApi = exports.GeneralApiFactory = exports.GeneralApiFp = exports.GeneralApiAxiosParamCreator = exports.ExpressionApi = exports.ExpressionApiFactory = exports.ExpressionApiFp = exports.ExpressionApiAxiosParamCreator = exports.RelationType = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
 *
 * @export
 * @enum {string}
 */
exports.RelationType = {
    OneToMany: 'oneToMany',
    ManyToOne: 'manyToOne',
    OneToOne: 'oneToOne'
};
/**
 * ExpressionApi - axios parameter creator
 * @export
 */
const ExpressionApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {QueryRequest} [queryRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        constraints: (queryRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/constraints`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(queryRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {QueryRequest} queryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        execute: (queryRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'queryRequest' is not null or undefined
            (0, common_1.assertParamExists)('execute', 'queryRequest', queryRequest);
            const localVarPath = `/execute`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(queryRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {QueryRequest} [queryRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadata: (queryRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/metadata`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(queryRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {QueryRequest} [queryRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        model: (queryRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/model`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(queryRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {QueryRequest} [queryRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parameters: (queryRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/parameters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(queryRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {QueryRequest} queryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sentence: (queryRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'queryRequest' is not null or undefined
            (0, common_1.assertParamExists)('sentence', 'queryRequest', queryRequest);
            const localVarPath = `/sentence`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(queryRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.ExpressionApiAxiosParamCreator = ExpressionApiAxiosParamCreator;
/**
 * ExpressionApi - functional programming interface
 * @export
 */
const ExpressionApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ExpressionApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {QueryRequest} [queryRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        constraints(queryRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.constraints(queryRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, configuration);
            });
        },
        /**
         *
         * @param {QueryRequest} queryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        execute(queryRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.execute(queryRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, configuration);
            });
        },
        /**
        *
        * @param {QueryRequest} queryRequest
        * @param {*} [options] Override http request option.
        * @throws {RequiredError}
        */
        executeQueued(queryQueuedRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.execute(queryQueuedRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, configuration);
            });
        },
        /**
         *
         * @param {QueryRequest} [queryRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadata(queryRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.metadata(queryRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, configuration);
            });
        },
        /**
         *
         * @param {QueryRequest} [queryRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        model(queryRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.model(queryRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, configuration);
            });
        },
        /**
         *
         * @param {QueryRequest} [queryRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parameters(queryRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.parameters(queryRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, configuration);
            });
        },
        /**
         *
         * @param {QueryRequest} queryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sentence(queryRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sentence(queryRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, configuration);
            });
        },
    };
};
exports.ExpressionApiFp = ExpressionApiFp;
/**
 * ExpressionApi - factory interface
 * @export
 */
const ExpressionApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ExpressionApiFp)(configuration);
    return {
        /**
         *
         * @param {QueryRequest} [queryRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        constraints(queryRequest, options) {
            return localVarFp.constraints(queryRequest, options).then((request) => request(axios, configuration.basePath));
        },
        /**
         *
         * @param {QueryRequest} queryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        execute(queryRequest, options) {
            return localVarFp.execute(queryRequest, options).then((request) => request(axios, configuration.basePath));
        },
        /**
         *
         * @param {QueryRequest} [queryRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadata(queryRequest, options) {
            return localVarFp.metadata(queryRequest, options).then((request) => request(axios, configuration.basePath));
        },
        /**
         *
         * @param {QueryRequest} [queryRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        model(queryRequest, options) {
            return localVarFp.model(queryRequest, options).then((request) => request(axios, configuration.basePath));
        },
        /**
         *
         * @param {QueryRequest} [queryRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parameters(queryRequest, options) {
            return localVarFp.parameters(queryRequest, options).then((request) => request(axios, configuration.basePath));
        },
        /**
         *
         * @param {QueryRequest} queryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sentence(queryRequest, options) {
            return localVarFp.sentence(queryRequest, options).then((request) => request(axios, configuration.basePath));
        },
    };
};
exports.ExpressionApiFactory = ExpressionApiFactory;
/**
 * ExpressionApi - object-oriented interface
 * @export
 * @class ExpressionApi
 * @extends {BaseAPI}
 */
class ExpressionApi extends base_1.BaseAPI {
    /**
     *
     * @param {QueryRequest} [queryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpressionApi
     */
    constraints(queryRequest, options) {
        return (0, exports.ExpressionApiFp)(this.configuration).constraints(queryRequest, options).then((request) => request(this.axios, this.configuration.basePath));
    }
    /**
     *
     * @param {QueryRequest} queryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpressionApi
     */
    execute(queryRequest, options) {
        return (0, exports.ExpressionApiFp)(this.configuration).execute(queryRequest, options).then((request) => request(this.axios, this.configuration.basePath));
    }
    /**
     *
     * @param {QueryQueuedRequest} queryQueuedRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpressionApi
     */
    executeQueued(queryQueuedRequest, options) {
        return (0, exports.ExpressionApiFp)(this.configuration).execute(queryQueuedRequest, options).then((request) => request(this.axios, this.configuration.basePath));
    }
    /**
     *
     * @param {QueryRequest} [queryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpressionApi
     */
    metadata(queryRequest, options) {
        return (0, exports.ExpressionApiFp)(this.configuration).metadata(queryRequest, options).then((request) => request(this.axios, this.configuration.basePath));
    }
    /**
     *
     * @param {QueryRequest} [queryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpressionApi
     */
    model(queryRequest, options) {
        return (0, exports.ExpressionApiFp)(this.configuration).model(queryRequest, options).then((request) => request(this.axios, this.configuration.basePath));
    }
    /**
     *
     * @param {QueryRequest} [queryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpressionApi
     */
    parameters(queryRequest, options) {
        return (0, exports.ExpressionApiFp)(this.configuration).parameters(queryRequest, options).then((request) => request(this.axios, this.configuration.basePath));
    }
    /**
     *
     * @param {QueryRequest} queryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpressionApi
     */
    sentence(queryRequest, options) {
        return (0, exports.ExpressionApiFp)(this.configuration).sentence(queryRequest, options).then((request) => request(this.axios, this.configuration.basePath));
    }
}
exports.ExpressionApi = ExpressionApi;
/**
 * GeneralApi - axios parameter creator
 * @export
 */
const GeneralApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        health: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metrics: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/metrics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ping: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/ping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.GeneralApiAxiosParamCreator = GeneralApiAxiosParamCreator;
/**
 * GeneralApi - functional programming interface
 * @export
 */
const GeneralApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.GeneralApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        health(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.health(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, configuration);
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metrics(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.metrics(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, configuration);
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ping(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.ping(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, configuration);
            });
        },
    };
};
exports.GeneralApiFp = GeneralApiFp;
/**
 * GeneralApi - factory interface
 * @export
 */
const GeneralApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.GeneralApiFp)(configuration);
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        health(options) {
            return localVarFp.health(options).then((request) => request(axios, configuration.basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metrics(options) {
            return localVarFp.metrics(options).then((request) => request(axios, configuration.basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ping(options) {
            return localVarFp.ping(options).then((request) => request(axios, configuration.basePath));
        },
    };
};
exports.GeneralApiFactory = GeneralApiFactory;
/**
 * GeneralApi - object-oriented interface
 * @export
 * @class GeneralApi
 * @extends {BaseAPI}
 */
class GeneralApi extends base_1.BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    health(options) {
        return (0, exports.GeneralApiFp)(this.configuration).health(options).then((request) => request(this.axios, this.configuration.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    metrics(options) {
        return (0, exports.GeneralApiFp)(this.configuration).metrics(options).then((request) => request(this.axios, this.configuration.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    ping(options) {
        return (0, exports.GeneralApiFp)(this.configuration).ping(options).then((request) => request(this.axios, this.configuration.basePath));
    }
}
exports.GeneralApi = GeneralApi;
/**
 * SchemaApi - axios parameter creator
 * @export
 */
const SchemaApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} _enum
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _enum: (_enum, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter '_enum' is not null or undefined
            (0, common_1.assertParamExists)('_enum', '_enum', _enum);
            const localVarPath = `/enums/{enum}`
                .replace(`{${"enum"}}`, encodeURIComponent(String(_enum)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dataSources: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/datasources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} datasource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasource: (datasource, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'datasource' is not null or undefined
            (0, common_1.assertParamExists)('datasource', 'datasource', datasource);
            const localVarPath = `/datasources/{datasource}`
                .replace(`{${"datasource"}}`, encodeURIComponent(String(datasource)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        entities: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/entities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        entity: (entity, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'entity' is not null or undefined
            (0, common_1.assertParamExists)('entity', 'entity', entity);
            const localVarPath = `/entities/{entity}`
                .replace(`{${"entity"}}`, encodeURIComponent(String(entity)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} mapping
         * @param {string} entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        entityMapping: (mapping, entity, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'mapping' is not null or undefined
            (0, common_1.assertParamExists)('entityMapping', 'mapping', mapping);
            // verify required parameter 'entity' is not null or undefined
            (0, common_1.assertParamExists)('entityMapping', 'entity', entity);
            const localVarPath = `/mappings/{mapping}/{entity}`
                .replace(`{${"mapping"}}`, encodeURIComponent(String(mapping)))
                .replace(`{${"entity"}}`, encodeURIComponent(String(entity)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enums: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/enums`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} mapping
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mapping: (mapping, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'mapping' is not null or undefined
            (0, common_1.assertParamExists)('mapping', 'mapping', mapping);
            const localVarPath = `/mappings/{mapping}`
                .replace(`{${"mapping"}}`, encodeURIComponent(String(mapping)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mappings: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/mappings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} stage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stage: (stage, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'stage' is not null or undefined
            (0, common_1.assertParamExists)('stage', 'stage', stage);
            const localVarPath = `/stages/{stage}`
                .replace(`{${"stage"}}`, encodeURIComponent(String(stage)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stages: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/stages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.SchemaApiAxiosParamCreator = SchemaApiAxiosParamCreator;
/**
 * SchemaApi - functional programming interface
 * @export
 */
const SchemaApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.SchemaApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} _enum
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _enum(_enum, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator._enum(_enum, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, configuration);
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dataSources(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.dataSources(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, configuration);
            });
        },
        /**
         *
         * @param {string} datasource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasource(datasource, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.datasource(datasource, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, configuration);
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        entities(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.entities(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, configuration);
            });
        },
        /**
         *
         * @param {string} entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        entity(entity, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.entity(entity, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, configuration);
            });
        },
        /**
         *
         * @param {string} mapping
         * @param {string} entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        entityMapping(mapping, entity, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.entityMapping(mapping, entity, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, configuration);
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enums(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.enums(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, configuration);
            });
        },
        /**
         *
         * @param {string} mapping
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mapping(mapping, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.mapping(mapping, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, configuration);
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mappings(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.mappings(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, configuration);
            });
        },
        /**
         *
         * @param {string} stage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stage(stage, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.stage(stage, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, configuration);
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stages(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.stages(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, configuration);
            });
        },
    };
};
exports.SchemaApiFp = SchemaApiFp;
/**
 * SchemaApi - factory interface
 * @export
 */
const SchemaApiFactory = function (configuration, axios) {
    const localVarFp = (0, exports.SchemaApiFp)(configuration);
    return {
        /**
         *
         * @param {string} _enum
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _enum(_enum, options) {
            return localVarFp._enum(_enum, options).then((request) => request(axios, configuration.basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dataSources(options) {
            return localVarFp.dataSources(options).then((request) => request(axios, configuration.basePath));
        },
        /**
         *
         * @param {string} datasource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasource(datasource, options) {
            return localVarFp.datasource(datasource, options).then((request) => request(axios, configuration.basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        entities(options) {
            return localVarFp.entities(options).then((request) => request(axios, configuration.basePath));
        },
        /**
         *
         * @param {string} entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        entity(entity, options) {
            return localVarFp.entity(entity, options).then((request) => request(axios, configuration.basePath));
        },
        /**
         *
         * @param {string} mapping
         * @param {string} entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        entityMapping(mapping, entity, options) {
            return localVarFp.entityMapping(mapping, entity, options).then((request) => request(axios, configuration.basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enums(options) {
            return localVarFp.enums(options).then((request) => request(axios, configuration.basePath));
        },
        /**
         *
         * @param {string} mapping
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mapping(mapping, options) {
            return localVarFp.mapping(mapping, options).then((request) => request(axios, configuration.basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mappings(options) {
            return localVarFp.mappings(options).then((request) => request(axios, configuration.basePath));
        },
        /**
         *
         * @param {string} stage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stage(stage, options) {
            return localVarFp.stage(stage, options).then((request) => request(axios, configuration.basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stages(options) {
            return localVarFp.stages(options).then((request) => request(axios, configuration.basePath));
        },
    };
};
exports.SchemaApiFactory = SchemaApiFactory;
/**
 * SchemaApi - object-oriented interface
 * @export
 * @class SchemaApi
 * @extends {BaseAPI}
 */
class SchemaApi extends base_1.BaseAPI {
    /**
     *
     * @param {string} _enum
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaApi
     */
    _enum(_enum, options) {
        return (0, exports.SchemaApiFp)(this.configuration)._enum(_enum, options).then((request) => request(this.axios, this.configuration.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaApi
     */
    dataSources(options) {
        return (0, exports.SchemaApiFp)(this.configuration).dataSources(options).then((request) => request(this.axios, this.configuration.basePath));
    }
    /**
     *
     * @param {string} datasource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaApi
     */
    datasource(datasource, options) {
        return (0, exports.SchemaApiFp)(this.configuration).datasource(datasource, options).then((request) => request(this.axios, this.configuration.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaApi
     */
    entities(options) {
        return (0, exports.SchemaApiFp)(this.configuration).entities(options).then((request) => request(this.axios, this.configuration.basePath));
    }
    /**
     *
     * @param {string} entity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaApi
     */
    entity(entity, options) {
        return (0, exports.SchemaApiFp)(this.configuration).entity(entity, options).then((request) => request(this.axios, this.configuration.basePath));
    }
    /**
     *
     * @param {string} mapping
     * @param {string} entity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaApi
     */
    entityMapping(mapping, entity, options) {
        return (0, exports.SchemaApiFp)(this.configuration).entityMapping(mapping, entity, options).then((request) => request(this.axios, this.configuration.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaApi
     */
    enums(options) {
        return (0, exports.SchemaApiFp)(this.configuration).enums(options).then((request) => request(this.axios, this.configuration.basePath));
    }
    /**
     *
     * @param {string} mapping
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaApi
     */
    mapping(mapping, options) {
        return (0, exports.SchemaApiFp)(this.configuration).mapping(mapping, options).then((request) => request(this.axios, this.configuration.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaApi
     */
    mappings(options) {
        return (0, exports.SchemaApiFp)(this.configuration).mappings(options).then((request) => request(this.axios, this.configuration.basePath));
    }
    /**
     *
     * @param {string} stage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaApi
     */
    stage(stage, options) {
        return (0, exports.SchemaApiFp)(this.configuration).stage(stage, options).then((request) => request(this.axios, this.configuration.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaApi
     */
    stages(options) {
        return (0, exports.SchemaApiFp)(this.configuration).stages(options).then((request) => request(this.axios, this.configuration.basePath));
    }
}
exports.SchemaApi = SchemaApi;
/**
 * StageApi - axios parameter creator
 * @export
 */
const StageApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} stage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _export: (stage, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'stage' is not null or undefined
            (0, common_1.assertParamExists)('_export', 'stage', stage);
            const localVarPath = `/stages/{stage}/export`
                .replace(`{${"stage"}}`, encodeURIComponent(String(stage)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} stage
         * @param {SchemaData} schemaData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _import: (stage, schemaData, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'stage' is not null or undefined
            (0, common_1.assertParamExists)('_import', 'stage', stage);
            // verify required parameter 'schemaData' is not null or undefined
            (0, common_1.assertParamExists)('_import', 'schemaData', schemaData);
            const localVarPath = `/stages/{stage}/import`
                .replace(`{${"stage"}}`, encodeURIComponent(String(stage)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(schemaData, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} stage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exists: (stage, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'stage' is not null or undefined
            (0, common_1.assertParamExists)('exists', 'stage', stage);
            const localVarPath = `/stages/{stage}/exists`
                .replace(`{${"stage"}}`, encodeURIComponent(String(stage)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.StageApiAxiosParamCreator = StageApiAxiosParamCreator;
/**
 * StageApi - functional programming interface
 * @export
 */
const StageApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.StageApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} stage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _export(stage, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator._export(stage, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, configuration);
            });
        },
        /**
         *
         * @param {string} stage
         * @param {SchemaData} schemaData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _import(stage, schemaData, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator._import(stage, schemaData, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, configuration);
            });
        },
        /**
         *
         * @param {string} stage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exists(stage, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.exists(stage, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, configuration);
            });
        },
    };
};
exports.StageApiFp = StageApiFp;
/**
 * StageApi - factory interface
 * @export
 */
const StageApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.StageApiFp)(configuration);
    return {
        /**
         *
         * @param {string} stage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _export(stage, options) {
            return localVarFp._export(stage, options).then((request) => request(axios, configuration.basePath));
        },
        /**
         *
         * @param {string} stage
         * @param {SchemaData} schemaData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _import(stage, schemaData, options) {
            return localVarFp._import(stage, schemaData, options).then((request) => request(axios, configuration.basePath));
        },
        /**
         *
         * @param {string} stage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exists(stage, options) {
            return localVarFp.exists(stage, options).then((request) => request(axios, configuration.basePath));
        },
    };
};
exports.StageApiFactory = StageApiFactory;
/**
 * StageApi - object-oriented interface
 * @export
 * @class StageApi
 * @extends {BaseAPI}
 */
class StageApi extends base_1.BaseAPI {
    /**
     *
     * @param {string} stage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StageApi
     */
    _export(stage, options) {
        return (0, exports.StageApiFp)(this.configuration)._export(stage, options).then((request) => request(this.axios, this.configuration.basePath));
    }
    /**
     *
     * @param {string} stage
     * @param {SchemaData} schemaData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StageApi
     */
    _import(stage, schemaData, options) {
        return (0, exports.StageApiFp)(this.configuration)._import(stage, schemaData, options).then((request) => request(this.axios, this.configuration.basePath));
    }
    /**
     *
     * @param {string} stage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StageApi
     */
    exists(stage, options) {
        return (0, exports.StageApiFp)(this.configuration).exists(stage, options).then((request) => request(this.axios, this.configuration.basePath));
    }
}
exports.StageApi = StageApi;
//# sourceMappingURL=api.js.map